---
title: "Single-Cell"
format: html
editor: visual
---

```{r}
library(Seurat)
library(SeuratObject)
library(tidyverse)
library(scuttle)
library(scDblFinder)
library(ggplot2)
#library(writexl)
#library(SeuratDisk)
library(celldex)
library(sctransform)
library(readxl)
```

```{r}
# Load scRNA-seq
getwd()
PT1 <- Read10X(data.dir = 'data/scRNA/PT1')
PT2 <- Read10X(data.dir = 'data/scRNA/PT2')
RT3 <- Read10X(data.dir = 'data/scRNA/RT3')
RT4 <- Read10X(data.dir = 'data/scRNA/RT4')

NT7 <- Read10X(data.dir = 'data/scRNA/NT7')
NT8 <- Read10X(data.dir = 'data/scRNA/NT8')
PT5 <- Read10X(data.dir = 'data/scRNA/PT5')
RT6 <- Read10X(data.dir = 'data/scRNA/RT6')

PT1.seu <- CreateSeuratObject(counts = PT1, project = "PT1", min.cells = 3, min.features = 200)
PT2.seu <- CreateSeuratObject(counts = PT2, project = "PT2", min.cells = 3, min.features = 200)
PT3.seu <- CreateSeuratObject(counts = PT5, project = "PT3", min.cells = 3, min.features = 200)
RT1.seu <- CreateSeuratObject(counts = RT3, project = "RT1", min.cells = 3, min.features = 200)
RT2.seu <- CreateSeuratObject(counts = RT4, project = "RT2", min.cells = 3, min.features = 200)
RT3.seu <- CreateSeuratObject(counts = RT6, project = "RT3", min.cells = 3, min.features = 200)
NT1.seu <- CreateSeuratObject(counts = NT7, project = "NT1", min.cells = 3, min.features = 200)
NT2.seu <- CreateSeuratObject(counts = NT8, project = "NT2", min.cells = 3, min.features = 200)

rm(PT1)
rm(PT2)
rm(RT3)
rm(RT4)
rm(NT7)
rm(NT8)
rm(PT5)
rm(RT6)

seurat_list <- c('PT1' = PT1.seu, 'PT2' = PT2.seu, 'PT3' = PT3.seu,
                 'RT1' = RT1.seu, 'RT2' = RT2.seu, 'RT3' = RT3.seu,
                 'NT1' = NT1.seu, 'NT2' = NT2.seu)
```

Find doublets and filter by MAD

```{r}
count <- 1
sample.nfeature.cut <- c()
sample.ncount.cut <- c()
sample.mt.cut <- c()
seurat_list_qc <- c()

for (obj in seurat_list) {
  print(names(seurat_list)[count])
  
  # Add percent.mt for QC
  obj[["percent.mt"]] <- PercentageFeatureSet(obj, pattern = "^MT-")
  
  # Visualize initial features
  print(VlnPlot(obj, features = c("nFeature_RNA", "nCount_RNA", "percent.mt"), ncol = 3))
  
  # Doublet detection
  print("Start doublet detection")
  sce <- as.SingleCellExperiment(obj)
  
  # Add logcounts if missing
  if (!"logcounts" %in% assayNames(sce)) {
    logcounts(sce) <- log1p(counts(sce))
  }
  
  # Perform scDblFinder
  sce <- scDblFinder(sce)
  print("Doublets ok")
  
  # Reconstruct Seurat object
  counts_matrix <- counts(sce)  # Extract counts
  meta_data <- as.data.frame(colData(sce))  # Extract metadata
  
  # Create Seurat object manually
  obj <- CreateSeuratObject(counts = counts_matrix, meta.data = meta_data)
  
  # Add percent.mt for QC
  obj <- PercentageFeatureSet(obj, pattern = "^MT-", col.name="percent.mt")
  
  # Normalize data (logcounts)
  if ("logcounts" %in% assayNames(sce)) {
    obj <- NormalizeData(obj, normalization.method = "LogNormalize", scale.factor = 10000)
  }
  
  # Scale data if needed (optional for downstream analysis)
  obj <- ScaleData(obj)
  
  print(head(obj@meta.data))
  
  print("Seurat reconstructed.")
  
  # Perform nMAD cutoff calculations
  nfeature.upcut <- ceiling(median(obj$nFeature_RNA + 3 * median(abs(obj$nFeature_RNA - median(obj$nFeature_RNA)))))
  ncount.upcut <- ceiling(median(obj$nCount_RNA + 3 * median(abs(obj$nCount_RNA - median(obj$nCount_RNA)))))
  permt.upcut <- ceiling(median(obj$percent.mt + 3 * median(abs(obj$percent.mt - median(obj$percent.mt)))))
  
  sample.nfeature.cut <- c(sample.nfeature.cut, nfeature.upcut)
  sample.ncount.cut <- c(sample.ncount.cut, ncount.upcut)
  sample.mt.cut <- c(sample.mt.cut, permt.upcut)
  
  # Perform QC filtering
  obj.filt <- subset(obj, subset = nFeature_RNA <= nfeature.upcut & nFeature_RNA > nfeature.upcut / 20)
  obj.filt <- subset(obj.filt, subset = nCount_RNA <= ncount.upcut & nCount_RNA > ncount.upcut / 20)
  obj.filt <- subset(obj.filt, subset = percent.mt <= min(permt.upcut, 25))
  obj.filt <- subset(obj.filt, subset = scDblFinder.class %in% c("singlet"))
  
  Idents(obj.filt) <- names(seurat_list)[count]
  
  # Visualize filtered features
  print(VlnPlot(obj.filt, features = c("nFeature_RNA", "nCount_RNA", "percent.mt"), ncol = 3))
  
  seurat_list_qc <- c(seurat_list_qc, obj.filt)
  print(count)
  count <- count + 1
  
}

# Name outputs for reference
names(sample.mt.cut) <- names(seurat_list)
names(sample.ncount.cut) <- names(seurat_list)
names(sample.nfeature.cut) <- names(seurat_list)
names(seurat_list_qc) <- names(seurat_list)
```

```{r}
samples <- names(seurat_list)
samples.ncount.cut.summary <- data.frame(orig.ident=c(samples,samples), 
                                         types=c(rep('up.cut',length(samples)),
                                                 rep('down.cut',length(samples))),
                                         values=c(sample.ncount.cut,sample.ncount.cut/20))

samples.nfeature.cut.summary <- data.frame(orig.ident=c(samples,samples), 
                                           types=c(rep('up.cut',length(samples)),
                                                   rep('down.cut',length(samples))),
                                           values=c(sample.nfeature.cut,sample.nfeature.cut/20))
# mt don't need lower cut
samples.mt.cut.summary <- data.frame(orig.ident=c(samples), 
                                     types=c(rep('up.cut',length(samples))),
                                     values=c(sample.mt.cut))

for (obj in seurat_list){
  obj[["percent.mt"]] <- PercentageFeatureSet(obj, pattern = "^MT-")
  seurat_list[[count]] <- obj
  count <- count +1
}

# Merge all Seurat objects from the initial list
# merge.seu <- merge(x = seurat_list[[1]], 
#                    y = seurat_list[2:length(seurat_list)], 
#                    add.cell.ids = names(seurat_list), 
#                    project = "MergedSeurat")

merge.seu.2 <- merge(x=seurat_list[[1]], y=seurat_list[2:length(seurat_list)])

metadata <- merge.seu.2@meta.data


# Visualize the number of cell counts per sample
metadata %>% 
  ggplot(aes(x=orig.ident, fill=orig.ident)) + 
  geom_bar() +
  theme_classic() +
  theme(axis.text.x = element_text(angle = 45, vjust = 1, hjust=1)) +
  theme(plot.title = element_text(hjust=0.5, face="bold")) +
  ggtitle("NCells")

metadata %>% 
  ggplot(aes(color=orig.ident, x=nCount_RNA, fill= orig.ident)) + 
  geom_density(alpha=.5) +
  scale_x_log10() +
  theme_classic() +
  geom_vline(data = samples.ncount.cut.summary, 
             aes(xintercept = values), 
             linetype = "dashed",show.legend = F) +
  facet_wrap(~orig.ident,ncol = 4)

metadata %>% 
  ggplot(aes(color=orig.ident, x=nFeature_RNA, fill= orig.ident)) + 
  geom_density(alpha=.5) +
  scale_x_log10() +
  theme_classic() +
  geom_vline(data = samples.nfeature.cut.summary, 
             aes(xintercept = values), 
             linetype = "dashed",show.legend = F) +
  facet_wrap(~orig.ident,ncol = 4)

metadata %>%
  ggplot(aes(color=orig.ident, x=percent.mt, fill= orig.ident)) +
  geom_density(alpha=.5) +
  scale_x_log10() +
  theme_classic() +
  geom_vline(data = samples.mt.cut.summary,
             aes(xintercept = values),
             linetype = "dashed",show.legend = F) +
  facet_wrap(~orig.ident,ncol = 4)

metadata %>%
  ggplot(aes(x=nCount_RNA, y=nFeature_RNA, color=percent.mt)) +
  geom_point() +
  scale_colour_gradient(low = "gray90", high = "black") +
  geom_smooth(se=TRUE,level=0.9) +
  scale_x_log10() +
  scale_y_log10() +
  theme_classic() +
  geom_vline(data = samples.ncount.cut.summary,
             aes(xintercept = values),
             linetype = "dashed",show.legend = F)+
  geom_hline(data = samples.nfeature.cut.summary,
             aes(yintercept = values),
             linetype = "dashed",show.legend = F) +
  facet_wrap(~orig.ident,ncol = 4)

merge.qc.seu <- merge(x=seurat_list_qc[[1]], y=seurat_list_qc[2:length(seurat_list_qc)])

metadata.qc <- merge.qc.seu@meta.data

metadata.qc %>% 
  ggplot(aes(x=orig.ident, fill=orig.ident)) + 
  geom_bar() +
  theme_classic() +
  theme(axis.text.x = element_text(angle = 45, vjust = 1, hjust=1)) +
  theme(plot.title = element_text(hjust=0.5, face="bold")) +
  ggtitle("NCells")

metadata.qc %>% 
  ggplot(aes(color=orig.ident, x=nCount_RNA, fill= orig.ident)) + 
  geom_density(alpha=.5) +
  scale_x_log10() +
  theme_classic() +
  geom_vline(data = samples.ncount.cut.summary, 
             aes(xintercept = values), 
             linetype = "dashed",show.legend = F) +
  facet_wrap(~orig.ident,ncol=4)

metadata.qc %>% 
  ggplot(aes(color=orig.ident, x=nFeature_RNA, fill= orig.ident)) + 
  geom_density(alpha=.5) +
  scale_x_log10() +
  theme_classic() +
  geom_vline(data = samples.nfeature.cut.summary, 
             aes(xintercept = values), 
             linetype = "dashed",show.legend = F) +
  facet_wrap(~orig.ident,ncol=4)

metadata.qc %>% 
  ggplot(aes(color=orig.ident, x=percent.mt, fill= orig.ident)) + 
  geom_density(alpha=.5) +
  scale_x_log10() +
  theme_classic() +
  geom_vline(data = samples.mt.cut.summary, 
             aes(xintercept = values), 
             linetype = "dashed",show.legend = F) +
  facet_wrap(~orig.ident,ncol=4)

metadata.qc %>% 
  ggplot(aes(x=nCount_RNA, y=nFeature_RNA, color=percent.mt)) + 
  geom_point() + 
  scale_colour_gradient(low = "gray90", high = "black") +
  geom_smooth(se=TRUE,level=0.9) +
  scale_x_log10() +
  scale_y_log10() +
  theme_classic() +
  geom_vline(data = samples.ncount.cut.summary, 
             aes(xintercept = values), 
             linetype = "dashed",show.legend = F)+
  geom_hline(data = samples.nfeature.cut.summary, 
             aes(yintercept = values), 
             linetype = "dashed",show.legend = F) +
  facet_wrap(~orig.ident,ncol=4)
```
