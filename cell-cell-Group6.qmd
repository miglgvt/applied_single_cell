---
title: "cell-cell-Group6"
format: html
---

# Cell-Cell Communication Analysis

```{r}
suppressPackageStartupMessages({
  library(CellChat)
  library(patchwork)
  library(dplyr)
  library(Seurat)
})
options(stringsAsFactors = FALSE)
future::plan("multisession", workers = 4)  # Enable parallel processing
```

## Step 1: Subset seurat objects
```{r}
integrated.seu <- readRDS("data/scRNA/TTs.annotated.rds")

```

```{r}
primary <- subset(
  integrated.seu, 
  subset =  orig.ident %in% c("PT1", "PT2", "PT3")
)

recurrent <- subset(
  integrated.seu, 
  subset = orig.ident %in% c("RT1", "RT2", "RT3")
)
```

```{r}
# Normalize Data
primary <- NormalizeData(primary)
recurrent <- NormalizeData(recurrent)

# Set Default Assay to RNA
DefaultAssay(primary) <- "RNA"
DefaultAssay(recurrent) <- "RNA"

# Find Variable Features
primary <- FindVariableFeatures(primary, selection.method = "vst", nfeatures = 2000)
recurrent <- FindVariableFeatures(recurrent, selection.method = "vst", nfeatures = 2000)

# Scale Data
primary <- ScaleData(primary)
recurrent <- ScaleData(recurrent)

```

## Step 2: Create Separate CellChat Objects for Primary and Recurrent


```{r}
# For Primary
cellchat_primary <- createCellChat(object = primary, meta = primary@meta.data, group.by = "cell.annot")
cellchat_primary@DB <- CellChatDB.human

# For Recurrent
cellchat_recurrent <- createCellChat(object = recurrent, meta = recurrent@meta.data, group.by = "cell.annot")
cellchat_recurrent@DB <- CellChatDB.human

```

```{r}
CellChatDB <- CellChatDB.human 
showDatabaseCategory(CellChatDB)
```


## Step 4: Preprocess  the expression data for cell-cell communication analysis

```{r}
cellchat_primary <- subsetData(cellchat_primary)
cellchat_primary <- identifyOverExpressedGenes(cellchat_primary)
cellchat_primary <- identifyOverExpressedInteractions(cellchat_primary)
cellchat_primary <- computeCommunProb(cellchat_primary)
cellchat_primary <- filterCommunication(cellchat_primary, min.cells = 10)
cellchat_primary <- computeCommunProbPathway(cellchat_primary)
cellchat_primary <- aggregateNet(cellchat_primary)
```

```{r}
cellchat_recurrent <- subsetData(cellchat_recurrent)
cellchat_recurrent <- identifyOverExpressedGenes(cellchat_recurrent)
cellchat_recurrent <- identifyOverExpressedInteractions(cellchat_recurrent)
cellchat_recurrent <- computeCommunProb(cellchat_recurrent)
cellchat_recurrent <- filterCommunication(cellchat_recurrent, min.cells = 10)
cellchat_recurrent <- computeCommunProbPathway(cellchat_recurrent)
cellchat_recurrent <- aggregateNet(cellchat_recurrent)
```


# Step 5: Identify and Rank Top Signaling Pathways

```{r}
# Rank signaling pathways by communication strength
primary_pathway_scores <- cellchat_primary@netP$score
top_primary_pathways <- names(sort(rowMeans(primary_pathway_scores), decreasing = TRUE))[1:5]
print("Top 5 Pathways for Primary:")
print(top_primary_pathways)

```

```{r}
# Rank signaling pathways by communication strength
recurrent_pathway_scores <- cellchat_recurrent@netP$score
top_recurrent_pathways <- names(sort(rowMeans(recurrent_pathway_scores), decreasing = TRUE))[1:5]
print("Top 5 Pathways for Recurrent:")
print(top_recurrent_pathways)
```

## Step 6: Visualize Top Pathways

```{r}
# Circle plot for the top primary pathway
par(mfrow = c(1, 1))
netVisual_aggregate(cellchat_primary, signaling = top_primary_pathways[1], layout = "circle")

# Circle plot for the top recurrent pathway
par(mfrow = c(1, 1))
netVisual_aggregate(cellchat_recurrent, signaling = top_recurrent_pathways[1], layout = "circle")
```


```{r}
# Heatmap for the top primary pathway
netVisual_heatmap(cellchat_primary, signaling = top_primary_pathways[1], color.heatmap = "Reds")

# Heatmap for the top recurrent pathway
netVisual_heatmap(cellchat_recurrent, signaling = top_recurrent_pathways[1], color.heatmap = "Blues")

```

## Step 7: Visualize a Specific Pathway 
```{r}
# Visualize the TNF pathway for primary
netVisual_aggregate(cellchat_primary, signaling = "TNF", layout = "circle")
netVisual_heatmap(cellchat_primary, signaling = "TNF", color.heatmap = "Reds")

```

```{r}
# Visualize the TNF pathway for recurrent
netVisual_aggregate(cellchat_recurrent, signaling = "TNF", layout = "circle")
netVisual_heatmap(cellchat_recurrent, signaling = "TNF", color.heatmap = "Blues")
```

