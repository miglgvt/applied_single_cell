---
title: "DCTA_DGEA"
format: html
editor: visual
---

```{r}
suppressPackageStartupMessages({
library(DCATS)
library(Seurat)
library(SeuratData)
library(SingleCellExperiment)
library(clusterProfiler)
library(dplyr)
library(enrichplot)
library(fgsea)
library(ggplot2)
library(ggrepel)
library(tibble)
library(tidyverse)
})
```

```{r}
integrated_rna <- readRDS("data/scRNA/integratedTT_NT_all.rds")

# Create new ID based on sample number and type
integrated_rna$id <- paste0(integrated_rna$orig.ident)

# Simplify labels for comparisons
integrated_rna$orig.ident[integrated_rna$orig.ident %in% c('NT1', 'NT2')] <- 'NT'
integrated_rna$orig.ident[integrated_rna$orig.ident %in% c('PT1', 'PT2', 'PT3')] <- 'PT'
integrated_rna$orig.ident[integrated_rna$orig.ident %in% c('RT1', 'RT2', 'RT3')] <- 'RT'

```

```{r}


# Convert to SingleCellExperiment object
sce <- as.SingleCellExperiment(integrated_rna)

```

```{r}
# Estimate similarity matrix using the cell-type annotations
knn_mat <- knn_simMat(integrated_rna@graphs$RNA_snn, integrated_rna$cell_type_manual)

# Create count matrix for abundance comparison
count_mat <- table(integrated_rna$id, integrated_rna$cell_type_manual)

```

```{r}

# Define study design for comparison groups
# Comparing Primary Tumor vs Normal Tissue
sim_design_PT_vs_NT <- data.frame(condition = c(rep("NT", sum(integrated_rna$id %in% c('NT1', 'NT2'))),
                                                 rep("PT", sum(integrated_rna$id %in% c('PT1', 'PT2', 'PT3')))))

# Perform differential composition analysis for PT vs NT
dcats_results_PT_vs_NT <- dcats_GLM(count_mat, sim_design_PT_vs_NT, knn_mat)

# Comparing Recurrent Tumor vs Normal Tissue
sim_design_RT_vs_NT <- data.frame(condition = c(rep("NT", sum(integrated_rna$id %in% c('NT1', 'NT2'))),
                                                 rep("RT", sum(integrated_rna$id %in% c('RT1', 'RT2', 'RT3')))))

dcats_results_RT_vs_NT <- dcats_GLM(count_mat, sim_design_RT_vs_NT, knn_mat)

# Comparing Primary Tumor vs Recurrent Tumor
sim_design_PT_vs_RT <- data.frame(condition = c(rep("PT", sum(integrated_rna$id %in% c('PT1', 'PT2', 'PT3'))),
                                                 rep("RT", sum(integrated_rna$id %in% c('RT1', 'RT2', 'RT3')))))

dcats_results_PT_vs_RT <- dcats_GLM(count_mat, sim_design_PT_vs_RT, knn_mat)



```

```{r}
# View results for PT vs NT
print(dcats_results_PT_vs_NT)

```

```{r}
# View results for RT vs NT
print(dcats_results_RT_vs_NT)


```

```{r}
# View results for PT vs RT
print(dcats_results_PT_vs_RT)
```

## Differential Gene Expression Analysis:

```{r}
library(Seurat)
library(DESeq2)
library(dplyr)
library(tibble)

```

```{r}
# Aggregate counts to sample level
counts <- AggregateExpression(integrated_rna, 
                              group.by = c("cell_type_manual", "orig.ident"),
                              assays = "RNA",
                              return.seurat = FALSE)
counts <- counts$RNA

# Transpose and convert to data.frame
counts.t <- t(counts)
counts.t <- as.data.frame(counts.t)

# Extract the sample group (e.g., PT, RT, NT) from row names
splitRows <- gsub('_.*', '', rownames(counts.t))

# Split data by cell type
cts.split <- split.data.frame(counts.t, f = factor(splitRows))

# Fix column names and transpose for further processing
cts.split.modified <- lapply(cts.split, function(x) {
    rownames(x) <- gsub('.*_(.*)', '\\1', rownames(x)) # Keep only the sample names
    t(x)
})

# Extract count matrix for a specific cell type (e.g., CD14+ Monocytes)
counts_monocytes <- cts.split.modified$`CD14+ Monocyte`

# Create sample metadata
colData <- data.frame(samples = colnames(counts_monocytes))

# Assign condition labels
colData <- colData %>%
  dplyr::mutate(condition = ifelse(grepl('PT', samples), 'PT',
                            ifelse(grepl('RT', samples), 'RT', 'NT'))) %>%
  column_to_rownames(var = 'samples')
```

```{r}
# Convert to DESeq2 dataset
dds <- DESeqDataSetFromMatrix(countData = counts_monocytes,
                              colData = colData,
                              design = ~ condition)

# Set NT as reference for comparisons
dds$condition <- relevel(dds$condition, ref = "NT")

# Run DESeq2
dds <- DESeq(dds)

# Check available comparisons
resultsNames(dds)
```

RT vs PT

```{r}
res_RT_vs_PT <- results(dds, contrast = c("condition", "RT", "PT"))
summary(res_RT_vs_PT)

# Convert to tibble and sort by padj
res_tbl_RT_vs_PT <- res_RT_vs_PT %>%
  data.frame() %>%
  rownames_to_column(var = "gene") %>%
  as_tibble() %>%
  arrange(padj)


```

RT vs NT

```{r}
res_RT_vs_NT <- results(dds, contrast = c("condition", "RT", "NT"))
summary(res_RT_vs_NT)

# Convert to tibble and sort by padj
res_tbl_RT_vs_NT <- res_RT_vs_NT %>%
  data.frame() %>%
  rownames_to_column(var = "gene") %>%
  as_tibble() %>%
  arrange(padj)


```

PT vs NT

```{r}
res_PT_vs_NT <- results(dds, contrast = c("condition", "PT", "NT"))
summary(res_PT_vs_NT)

# Convert to tibble and sort by padj
res_tbl_PT_vs_NT <- res_PT_vs_NT %>%
  data.frame() %>%
  rownames_to_column(var = "gene") %>%
  as_tibble() %>%
  arrange(padj)


```

Identify top differentially expressed genes

```{r}
# Set adjusted p-value cutoff
padj_cutoff <- 0.005

# Get significant results for RT vs PT
sig_res_RT_vs_PT <- dplyr::filter(res_tbl_RT_vs_PT, padj < padj_cutoff) %>%
  dplyr::arrange(padj)

# Get significant results for RT vs NT
sig_res_RT_vs_NT <- dplyr::filter(res_tbl_RT_vs_NT, padj < padj_cutoff) %>%
  dplyr::arrange(padj)

# Get significant results for PT vs NT
sig_res_PT_vs_NT <- dplyr::filter(res_tbl_PT_vs_NT, padj < padj_cutoff) %>%
  dplyr::arrange(padj)

# Identify top 20 differentially expressed genes based on p-value for RT vs PT
top20_RT_vs_PT <- sig_res_RT_vs_PT %>%
  dplyr::arrange(padj) %>%
  dplyr::pull(gene) %>%
  head(n=20)

# Identify top 20 differentially expressed genes based on p-value for RT vs NT
top20_RT_vs_NT <- sig_res_RT_vs_NT %>%
  dplyr::arrange(padj) %>%
  dplyr::pull(gene) %>%
  head(n=20)


# Identify top 20 differentially expressed genes based on p-value for PT vs NT
top20_PT_vs_NT <- sig_res_PT_vs_NT %>%
  dplyr::arrange(padj) %>%
  dplyr::pull(gene) %>%
  head(n=20)


# Print the top 20 differentially expressed genes
print("RT vs PT")
print(top20_RT_vs_PT)

print("RT vs NT")
print(top20_RT_vs_NT)

print("NT vs PT")
print(top20_PT_vs_NT)
```
