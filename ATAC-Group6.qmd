---
title: "Single-Cell ATAC"
format: html
editor: visual
---

```{r}
library(Signac)
library(Seurat)
library(GenomicRanges)
library(EnsDb.Hsapiens.v86)
library(ggplot2)
library(patchwork)
library(rtracklayer)
```

```{r}
find_common_peaks <- function(peakfiles, width.upcut=10000, width.lowcut=20){
  peaks.list <- lapply(peakfiles, FUN = function(files) {
    read.table(files, col.names = c("chr", "start", "end"))
  })
  peaks.gr.list <- lapply(peaks.list, FUN = function(files) {
    makeGRangesFromDataFrame(files)
  })
  myGRangesList<-GRangesList(peaks.gr.list)   
  combined.peaks <- reduce(unlist(myGRangesList))
  peakwidths <- width(combined.peaks)
  combined.peaks <- combined.peaks[peakwidths  < width.upcut & peakwidths > width.lowcut]
  return(combined.peaks)
}

create_merge_atac_seurat <- function(sc.csv, frag.tsv, combined.peaks, cells.cut=500){
  md <- read.table(
    file = sc.csv,
    stringsAsFactors = FALSE,
    sep = ",",
    header = TRUE,
    row.names = 1
  )[-1, ] # remove the first row
  
  # perform an initial filtering of low count cells
  md <- md[md$passed_filters > cells.cut, ]
  
  frags <- CreateFragmentObject(
    path = frag.tsv,
    cells = rownames(md)
  )
  
  counts <- FeatureMatrix(
    fragments = frags,
    features = combined.peaks,
    cells = rownames(md)
  )
  
  sample_assay <- CreateChromatinAssay(counts, fragments = frags)
  sample.seu <- CreateSeuratObject(sample_assay, assay = "ATAC", meta.data=md)
  return(sample.seu)
} 
```

```{r}
NTs.combined.peaks <- find_common_peaks(
  c('data/scATAC/NT7/peaks.bed',
    'data/scATAC/NT8/peaks.bed')
)

NT7.atac.seu <- create_merge_atac_seurat("data/scATAC/NT7/singlecell.csv",
                                         "data/scATAC/NT7/fragments.tsv.gz",
                                         NTs.combined.peaks)
NT8.atac.seu <- create_merge_atac_seurat("data/scATAC/NT8/singlecell.csv",
                                         "data/scATAC/NT8/fragments.tsv.gz",
                                         NTs.combined.peaks)

# add information to identify dataset of origin
NT7.atac.seu$dataset <- 'NT1'
NT8.atac.seu$dataset <- 'NT2'

# merge all datasets, adding a cell ID to make sure cell names are unique
NTs.combined.seu <- merge(
  x = NT7.atac.seu,
  y = list(NT8.atac.seu),
  add.cell.ids = c("NT1","NT2")
)

# NTs.combined.seu <- RunTFIDF(NTs.combined.seu)
# NTs.combined.seu <- FindTopFeatures(NTs.combined.seu, min.cutoff = 20)
# NTs.combined.seu <- RunSVD(NTs.combined.seu)
# NTs.combined.seu <- RunUMAP(NTs.combined.seu, dims = 1:50, reduction = 'lsi')

saveRDS(NTs.combined.seu,'data/scATAC/NTs.atac.rds')
```

```{r}
DimPlot(NTs.combined.seu, group.by = "dataset", label = TRUE)
```

```{r}
TTs.combined.peaks <- find_common_peaks(
  c('data/scATAC/PT1/peaks.bed',
    'data/scATAC/PT2/peaks.bed',
    'data/scATAC/PT5/peaks.bed',
    'data/scATAC/RT3/peaks.bed',
    'data/scATAC/RT4/peaks.bed',
    'data/scATAC/RT6/peaks.bed')
)

PT1.atac.seu <- create_merge_atac_seurat("data/scATAC/PT1/singlecell.csv",
                                         "data/scATAC/PT1/fragments.tsv.gz",
                                         TTs.combined.peaks)
PT2.atac.seu <- create_merge_atac_seurat("data/scATAC/PT2/singlecell.csv",
                                         "data/scATAC/PT2/fragments.tsv.gz",
                                         TTs.combined.peaks)

PT5.atac.seu <- create_merge_atac_seurat("data/scATAC/PT5/singlecell.csv",
                                         "data/scATAC/PT5/fragments.tsv.gz",
                                         TTs.combined.peaks)
RT3.atac.seu <- create_merge_atac_seurat("data/scATAC/RT3/singlecell.csv",
                                         "data/scATAC/RT3/fragments.tsv.gz",
                                         TTs.combined.peaks)
RT4.atac.seu <- create_merge_atac_seurat("data/scATAC/RT4/singlecell.csv",
                                         "data/scATAC/RT4/fragments.tsv.gz",
                                         TTs.combined.peaks)
RT6.atac.seu <- create_merge_atac_seurat("data/scATAC/RT6/singlecell.csv",
                                         "data/scATAC/RT6/fragments.tsv.gz",
                                         TTs.combined.peaks)

# add information to identify dataset of origin
PT1.atac.seu$dataset <- 'PT1'
PT2.atac.seu$dataset <- 'PT2'
PT5.atac.seu$dataset <- 'PT3'
RT3.atac.seu$dataset <- 'RT1'
RT4.atac.seu$dataset <- 'RT2'
RT6.atac.seu$dataset <- 'RT3'


saveRDS(PT1.atac.seu,'data/scATAC/PT1.atac.rds')
saveRDS(PT2.atac.seu,'data/scATAC/PT2.atac.rds')
saveRDS(PT5.atac.seu,'data/scATAC/PT5.atac.rds')
saveRDS(RT3.atac.seu,'data/scATAC/RT3.atac.rds')
saveRDS(RT4.atac.seu,'data/scATAC/RT4.atac.rds')
saveRDS(RT6.atac.seu,'data/scATAC/RT6.atac.rds')
```

# Computing QC metrics

```{r}

TTs.batch1.seu <- merge(
  x = PT1.atac.seu,
  y = list(PT2.atac.seu,RT3.atac.seu,RT4.atac.seu),
  add.cell.ids = c("PT1","PT2","RT1","RT2")
)

TTs.batch2.seu <- merge(
  x = PT5.atac.seu,
  y = list(RT6.atac.seu),
  add.cell.ids = c("PT3","RT3")
)

seurat_list <- list(
  'NT' = NTs.combined.seu, 'Batch1' = TTs.batch1.seu, 'Batch2' = TTs.batch2.seu
)
```

```{r}
# extract gene annotations from EnsDb
annotation <- GetGRangesFromEnsDb(ensdb = EnsDb.Hsapiens.v86)
genome(annotation) <- "hg38"
seqlevels(annotation) <- paste0('chr', seqlevels(annotation))

# set the blacklist with rtracklayer
# Path to the downloaded blacklist file
blacklist_path <- "data/scATAC/hg38.blacklist.bed.gz"

# Import the blacklist as a GRanges object
blacklist_regions <- import(blacklist_path)

```

```{r}

# Loop through each Seurat object in the list
for (name in names(seurat_list)) {
  obj <- seurat_list[[name]]  # Get the current Seurat object
  
  # Compute nucleosome signal score per cell
  obj <- NucleosomeSignal(object = obj)
  
  # Add gene annotations to the object
  Annotation(obj) <- annotation
  
  # Compute TSS enrichment score per cell
  obj <- TSSEnrichment(object = obj)
  
  # Add fraction of reads in peaks
  obj$pct_reads_in_peaks <- obj$peak_region_fragments / obj$passed_filters * 100
  
  # Add blacklist ratio
  obj$blacklist_ratio <- obj$blacklist_region_fragments / obj$peak_region_fragments
  
  # Create density scatter plot
  print(DensityScatter(obj, x = 'nCount_ATAC', y = 'TSS.enrichment', log_x = TRUE, quantiles = TRUE))
  
  # Categorize cells based on nucleosome signal
  obj$nucleosome_group <- ifelse(obj$nucleosome_signal > 4, 'NS > 4', 'NS < 4')
  
  # Plot fragment histogram
  print(FragmentHistogram(object = obj, group.by = 'nucleosome_group'))
  
  # Generate violin plots
  print(VlnPlot(
    object = obj,
    features = c('nCount_ATAC', 'TSS.enrichment', 'blacklist_ratio', 'nucleosome_signal', 'pct_reads_in_peaks'),
    pt.size = 0.1,
    ncol = 5
  ))
  
  # Save the modified object back to the list
  seurat_list[[name]] <- obj
}
```

```{r}
# Set QC cutoffs


```

```{r}
pbmc <- subset(
  x = pbmc,
  subset = nCount_peaks > 9000 &
    nCount_peaks < 100000 &
    pct_reads_in_peaks > 40 &
    blacklist_ratio < 0.01 &
    nucleosome_signal < 4 &
    TSS.enrichment > 4
)
pbmc
```
