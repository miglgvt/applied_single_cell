---
title: "Single-Cell ATAC"
format: html
editor: visual
---

```{r}
library(Signac)
library(Seurat)
library(GenomicRanges)
library(EnsDb.Hsapiens.v86)
library(ggplot2)
library(patchwork)
library(rtracklayer)
library(future)
library(stringr)
```

```{r}
find_common_peaks <- function(peakfiles, width.upcut=10000, width.lowcut=20){
  peaks.list <- lapply(peakfiles, FUN = function(files) {
    read.table(files, col.names = c("chr", "start", "end"))
  })
  peaks.gr.list <- lapply(peaks.list, FUN = function(files) {
    makeGRangesFromDataFrame(files)
  })
  myGRangesList<-GRangesList(peaks.gr.list)   
  combined.peaks <- reduce(unlist(myGRangesList))
  peakwidths <- width(combined.peaks)
  combined.peaks <- combined.peaks[peakwidths  < width.upcut & peakwidths > width.lowcut]
  return(combined.peaks)
}

create_merge_atac_seurat <- function(sc.csv, frag.tsv, combined.peaks, cells.cut=500){
  md <- read.table(
    file = sc.csv,
    stringsAsFactors = FALSE,
    sep = ",",
    header = TRUE,
    row.names = 1
  )[-1, ] # remove the first row
  
  # perform an initial filtering of low count cells
  md <- md[md$passed_filters > cells.cut, ]
  
  frags <- CreateFragmentObject(
    path = frag.tsv,
    cells = rownames(md)
  )
  
  counts <- FeatureMatrix(
    fragments = frags,
    features = combined.peaks,
    cells = rownames(md)
  )
  
  sample_assay <- CreateChromatinAssay(counts, fragments = frags)
  sample.seu <- CreateSeuratObject(sample_assay, assay = "ATAC", meta.data=md)
  return(sample.seu)
} 
```

```{r}
NTs.combined.peaks <- find_common_peaks(
  c('data/scATAC/NT7/peaks.bed',
    'data/scATAC/NT8/peaks.bed')
)

NT7.atac.seu <- create_merge_atac_seurat("data/scATAC/NT7/singlecell.csv",
                                         "data/scATAC/NT7/fragments.tsv.gz",
                                         NTs.combined.peaks)
NT8.atac.seu <- create_merge_atac_seurat("data/scATAC/NT8/singlecell.csv",
                                         "data/scATAC/NT8/fragments.tsv.gz",
                                         NTs.combined.peaks)

# add information to identify dataset of origin
NT7.atac.seu$dataset <- 'NT1'
NT8.atac.seu$dataset <- 'NT2'

# merge all datasets, adding a cell ID to make sure cell names are unique
NTs.combined.seu <- merge(
  x = NT7.atac.seu,
  y = list(NT8.atac.seu),
  add.cell.ids = c("NT1","NT2")
)

saveRDS(NTs.combined.seu,'data/scATAC/NTs.atac.rds')
```

```{r}
DimPlot(NTs.combined.seu, group.by = "dataset", label = TRUE)
```

```{r}
TTs.combined.peaks <- find_common_peaks(
  c('data/scATAC/PT1/peaks.bed',
    'data/scATAC/PT2/peaks.bed',
    'data/scATAC/PT5/peaks.bed',
    'data/scATAC/RT3/peaks.bed',
    'data/scATAC/RT4/peaks.bed',
    'data/scATAC/RT6/peaks.bed')
)

PT1.atac.seu <- create_merge_atac_seurat("data/scATAC/PT1/singlecell.csv",
                                         "data/scATAC/PT1/fragments.tsv.gz",
                                         TTs.combined.peaks)
PT2.atac.seu <- create_merge_atac_seurat("data/scATAC/PT2/singlecell.csv",
                                         "data/scATAC/PT2/fragments.tsv.gz",
                                         TTs.combined.peaks)

PT5.atac.seu <- create_merge_atac_seurat("data/scATAC/PT5/singlecell.csv",
                                         "data/scATAC/PT5/fragments.tsv.gz",
                                         TTs.combined.peaks)
RT3.atac.seu <- create_merge_atac_seurat("data/scATAC/RT3/singlecell.csv",
                                         "data/scATAC/RT3/fragments.tsv.gz",
                                         TTs.combined.peaks)
RT4.atac.seu <- create_merge_atac_seurat("data/scATAC/RT4/singlecell.csv",
                                         "data/scATAC/RT4/fragments.tsv.gz",
                                         TTs.combined.peaks)
RT6.atac.seu <- create_merge_atac_seurat("data/scATAC/RT6/singlecell.csv",
                                         "data/scATAC/RT6/fragments.tsv.gz",
                                         TTs.combined.peaks)

# add information to identify dataset of origin
PT1.atac.seu$dataset <- 'PT1'
PT2.atac.seu$dataset <- 'PT2'
PT5.atac.seu$dataset <- 'PT3'
RT3.atac.seu$dataset <- 'RT1'
RT4.atac.seu$dataset <- 'RT2'
RT6.atac.seu$dataset <- 'RT3'


saveRDS(PT1.atac.seu,'data/scATAC/PT1.atac.rds')
saveRDS(PT2.atac.seu,'data/scATAC/PT2.atac.rds')
saveRDS(PT5.atac.seu,'data/scATAC/PT5.atac.rds')
saveRDS(RT3.atac.seu,'data/scATAC/RT3.atac.rds')
saveRDS(RT4.atac.seu,'data/scATAC/RT4.atac.rds')
saveRDS(RT6.atac.seu,'data/scATAC/RT6.atac.rds')
```

# Computing QC metrics and Subsetting

```{r}
PT1.atac.seu <- readRDS('data/scATAC/PT1.atac.rds')
PT2.atac.seu <- readRDS('data/scATAC/PT2.atac.rds')
PT5.atac.seu <- readRDS('data/scATAC/PT5.atac.rds')
RT3.atac.seu <- readRDS('data/scATAC/RT3.atac.rds')
RT4.atac.seu <- readRDS('data/scATAC/RT4.atac.rds')
RT6.atac.seu <- readRDS('data/scATAC/RT6.atac.rds')
NTs.combined.seu <- readRDS('data/scATAC/NTs.atac.rds')
```

```{r}

TTs.batch1.seu <- merge(
  x = PT1.atac.seu,
  y = list(PT2.atac.seu,RT3.atac.seu,RT4.atac.seu),
  add.cell.ids = c("PT1","PT2","RT1","RT2")
)

saveRDS(TTs.batch1.seu,'data/scATAC/TTs.batch1.atac.rds')

TTs.batch2.seu <- merge(
  x = PT5.atac.seu,
  y = list(RT6.atac.seu),
  add.cell.ids = c("PT3","RT3")
)

saveRDS(TTs.batch2.seu,'data/scATAC/TTs.batch2.atac.rds')

seurat_list <- list(
  'NT' = NTs.combined.seu, 'Batch1' = TTs.batch1.seu, 'Batch2' = TTs.batch2.seu
)
```

```{r}
TTs.batch1.seu <- readRDS('data/scATAC/TTs.batch1.atac.rds')
TTs.batch2.seu <- readRDS('data/scATAC/TTs.batch2.atac.rds')
NTs.combined.seu <- readRDS('data/scATAC/NTs.atac.rds')
```

```{r}
# extract gene annotations from EnsDb
annotation <- GetGRangesFromEnsDb(ensdb = EnsDb.Hsapiens.v86)
genome(annotation) <- "hg38"
seqlevels(annotation) <- paste0('chr', seqlevels(annotation))

# set the blacklist with rtracklayer
# Path to the downloaded blacklist file
blacklist_path <- "data/scATAC/hg38.blacklist.bed.gz"

# Import the blacklist as a GRanges object
blacklist_regions <- import(blacklist_path)
```

```{r}
seurat_list <- list(
  "NT" = NTs.combined.seu,
  "Batch 1" = TTs.batch1.seu,
  "Batch 2" = TTs.batch2.seu
)
```

```{r}
# Loop through each Seurat object in the list
for (name in names(seurat_list)) {
  obj <- seurat_list[[name]]  # Get the current Seurat object
  
  # Compute nucleosome signal score per cell
  obj <- NucleosomeSignal(object = obj)
  
  # Add gene annotations to the object
  Annotation(obj) <- annotation
  
  # Compute TSS enrichment score per cell
  obj <- TSSEnrichment(object = obj)
  
  # Add fraction of reads in peaks
  obj$pct_reads_in_peaks <- obj$peak_region_fragments / obj$passed_filters * 100
  
  
  # Add blacklist ratio
  obj$blacklist_ratio <- obj$blacklist_region_fragments / obj$peak_region_fragments
  
  # Create density scatter plot
  print(DensityScatter(obj, x = 'nCount_ATAC', y = 'TSS.enrichment', log_x = TRUE, quantiles = TRUE))
  
  # Categorize cells based on nucleosome signal
  obj$nucleosome_group <- ifelse(obj$nucleosome_signal > 4, 'NS > 4', 'NS < 4')
  
  # Plot fragment histogram
  print(FragmentHistogram(object = obj, group.by = 'nucleosome_group'))
  
  # Generate violin plots
  print(VlnPlot(
    object = obj,
    features = c('nCount_ATAC', 'TSS.enrichment', 'blacklist_ratio', 'nucleosome_signal', 'pct_reads_in_peaks'),
    pt.size = 0.1,
    ncol = 5
  ))
  
  # Save the modified object back to the list
  seurat_list[[name]] <- obj
}
```

```{r}
for (name in names(seurat_list)) {
  obj <- seurat_list[[name]]  # Get the current Seurat object
  
  # Create density scatter plot
  print(DensityScatter(obj, x = 'nCount_ATAC', y = 'TSS.enrichment', log_x = TRUE, quantiles = TRUE))
  
  # Plot fragment histogram
  print(FragmentHistogram(object = obj, group.by = 'nucleosome_group'))
  
  # Generate violin plots
  print(VlnPlot(
    object = obj,
    features = c('nCount_ATAC', 'TSS.enrichment', 'peak_region_fragments', 'nucleosome_signal', 'pct_reads_in_peaks'),
    pt.size = 0.1,
    ncol = 5
  ))
}
```

```{r}
# Set QC cutoffs
cutoffs <- list(
  "NT" = list(peak_region_fragments_lower = 3000, peak_region_fragments_upper = 20000, 
              pct_reads_in_peaks_lower = 40, blacklist_ratio_upper = 0.01, 
              nucleosome_signal_upper = 2, TSS_enrichment_lower = 3),
  "Batch 1" = list(peak_region_fragments_lower = 3000, peak_region_fragments_upper = 20000, 
              pct_reads_in_peaks_lower = 25, blacklist_ratio_upper = 0.01, 
              nucleosome_signal_upper = 3, TSS_enrichment_lower = 2),
  "Batch 2" = list(peak_region_fragments_lower = 3000, peak_region_fragments_upper = 20000, 
              pct_reads_in_peaks_lower = 45, blacklist_ratio_upper = 0.01, 
              nucleosome_signal_upper = 2, TSS_enrichment_lower = 4)
)

```

```{r}
seurat_list_2 <- seurat_list[2:3]
seurat_list_2
```

```{r}
 NT.obj <- seurat_list[["NT"]]
 View(NT.obj@meta.data)
```

```{r}
seurat_list_qc <- c()

for (name in names(seurat_list)) {
  obj <- seurat_list[[name]]
  cutoff <- cutoffs[[name]]
  # obj <- RunTFIDF(obj)
  # obj <- FindTopFeatures(obj, min.cutoff = 10)
  # obj <- RunSVD(obj)
  
  obj.filt <- subset(
    x = obj,
    subset = 
      peak_region_fragments > cutoff$peak_region_fragments_lower & 
      peak_region_fragments < cutoff$peak_region_fragments_upper &
      pct_reads_in_peaks > cutoff$pct_reads_in_peaks_lower &
      blacklist_ratio < cutoff$blacklist_ratio_upper &
      nucleosome_signal < cutoff$nucleosome_signal_upper &
      TSS.enrichment > cutoff$TSS_enrichment_lower
  )
  
  seurat_list_qc[[name]] <- obj.filt
}

```

# Preprocessing

```{r}
for (name in names(seurat_list_qc)) {
  obj <- seurat_list_qc[[name]]
  
  obj <- RunTFIDF(obj)
  obj <- FindTopFeatures(obj, min.cutoff = 10)
  obj <- RunSVD(obj)
  obj <- RunUMAP(obj, dims = 2:30, reduction = 'lsi')
  
  seurat_list_qc[[name]] <- obj
}
```

# Integration

```{r}
NTs.combined.seu.filtered <- seurat_list_qc[["NT"]]
TTs.batch1.seu.filtered <- seurat_list_qc[["Batch 1"]]
TTs.batch2.seu.filtered <- seurat_list_qc[["Batch 2"]]
```

```{r}
saveRDS(NTs.combined.seu.filtered, 'data/scATAC/filtered/NTs.atac.seu.filtered.rds')
saveRDS(TTs.batch1.seu.filtered, 'data/scATAC/filtered/TTs.batch1.atac.seu.filtered.rds')
saveRDS(TTs.batch2.seu.filtered, 'data/scATAC/filtered/TTs.batch2.atac.seu.filtered.rds')
```

```{r}
NTs.combined.seu.filtered <- readRDS('data/scATAC/filtered/NTs.atac.seu.filtered.rds')
TTs.batch1.seu.filtered <- readRDS('data/scATAC/filtered/TTs.batch1.atac.seu.filtered.rds')
TTs.batch2.seu.filtered <- readRDS('data/scATAC/filtered/TTs.batch2.atac.seu.filtered.rds')
```

```{r}
# simple merge
TTs.atac.combined <- merge(TTs.batch1.seu.filtered, TTs.batch2.seu.filtered)

# process the combined dataset
TTs.atac.combined <- FindTopFeatures(TTs.atac.combined, min.cutoff = 10)
TTs.atac.combined <- RunTFIDF(TTs.atac.combined)
TTs.atac.combined <- RunSVD(TTs.atac.combined)
TTs.atac.combined <- RunUMAP(TTs.atac.combined, reduction = "lsi", dims = 2:30)
TTs.atac.combined$sample <- str_split_i(rownames(TTs.atac.combined@meta.data),"_",1)
p1 <- DimPlot(TTs.atac.combined, group.by = "sample")

```

```{r}
# anchor integration
peaks.use <- Reduce(intersect, list(rownames(TTs.batch1.seu.filtered), 
                                    rownames(TTs.batch2.seu.filtered)))

```

```{r}
#To speed up the following process, we will work in parallel. Load the library "Future" and set the plan to "multisession".
library(future)
plan("multisession", workers = 4) # Do not change it, or it might crash.
options(future.globals.maxSize = 12000 * 1024^2)

integration.anchors <- FindIntegrationAnchors(
  object.list = list(TTs.batch1.seu.filtered, TTs.batch2.seu.filtered),
  anchor.features = peaks.use,
  reduction = "rlsi",
  dims = 2:30
)

# integrate LSI embeddings
TTs.integrated <- IntegrateEmbeddings(
  anchorset = integration.anchors,
  reductions = TTs.atac.combined[["lsi"]],
  new.reduction.name = "integrated_lsi",
  dims.to.integrate = 1:30
)
```

```{r}
TTs.integrated <- RunUMAP(TTs.integrated, reduction = "integrated_lsi", dims = 2:30)
TTs.integrated$sample <- str_split_i(rownames(TTs.integrated@meta.data),"_",1)

p2 <- DimPlot(TTs.integrated, group.by = "sample")

(p1 + ggtitle("Merged")) | (p2 + ggtitle("Integrated"))
```

```{r}
saveRDS(TTs.atac.combined, 'data/scATAC/integration/TTs.atac.combined.rds' )
saveRDS(TTs.integrated, 'data/scATAC/integration/TTs.atac.integrated.rds' )
```

## All datasets

```{r}
# simple merge
all.atac.combined <- merge(NTs.combined.seu.filtered, TTs.integrated)

# process the combined dataset
all.atac.combined <- FindTopFeatures(all.atac.combined, min.cutoff = 10)
all.atac.combined <- RunTFIDF(all.atac.combined)
all.atac.combined <- RunSVD(all.atac.combined)
all.atac.combined <- RunUMAP(all.atac.combined, reduction = "lsi", dims = 2:30)
all.atac.combined$sample <- str_split_i(rownames(all.atac.combined@meta.data),"_",1)
p1 <- DimPlot(all.atac.combined, group.by = "sample")
```

```{r}
NTs.combined.seu.filtered <- FindTopFeatures(NTs.combined.seu.filtered, min.cutoff = 10)
NTs.combined.seu.filtered <- RunTFIDF(NTs.combined.seu.filtered)
NTs.combined.seu.filtered <- RunSVD(NTs.combined.seu.filtered)
NTs.combined.seu.filtered <- RunUMAP(NTs.combined.seu.filtered, reduction = "lsi", dims = 2:30)

TTs.integrated <- FindTopFeatures(TTs.integrated, min.cutoff = 10)
TTs.integrated <- RunTFIDF(TTs.integrated)
TTs.integrated <- RunSVD(TTs.integrated)
TTs.integrated <- RunUMAP(TTs.integrated, reduction = "lsi", dims = 2:30)

# anchor integration
peaks.use.all <- Reduce(intersect, list(rownames(NTs.combined.seu.filtered), 
                                    rownames(TTs.integrated)))
```

```{r}
#To speed up the following process, we will work in parallel. Load the library "Future" and set the plan to "multisession".
library(future)
plan("multisession", workers = 4) # Do not change it, or it might crash.
options(future.globals.maxSize = 15000 * 1024^2)

integration.anchors.all <- FindIntegrationAnchors(
  object.list = list(NTs.combined.seu.filtered, TTs.integrated),
  anchor.features = peaks.use.all,
  reduction = "rlsi",
  dims = 2:30
)

# integrate LSI embeddings
atac.integrated <- IntegrateEmbeddings(
  anchorset = integration.anchors.all,
  reductions = all.atac.combined[["lsi"]],
  new.reduction.name = "integrated_lsi",
  dims.to.integrate = 1:30
)
```

```{r}
atac.integrated <- RunUMAP(atac.integrated, reduction = "integrated_lsi", dims = 2:30)
atac.integrated$sample <- str_split_i(rownames(atac.integrated@meta.data),"_",1)
atac.integrated$dataset <- NULL

p2 <- DimPlot(atac.integrated, group.by = "sample")

(p1 + ggtitle("Merged")) | (p2 + ggtitle("Integrated"))
```

```{r}
atac.integrated <- RunTFIDF(atac.integrated)
atac.integrated <- FindTopFeatures(atac.integrated, min.cutoff = 'q0')
atac.integrated <- RunSVD(atac.integrated)
```

```{r}
saveRDS(atac.integrated, "data/scATAC/atac.integrated.rds")
```
