---
title: "Single-Cell"
format: html
editor: visual
---

```{r}
library(Seurat)
library(SeuratObject)
library(tidyverse)
library(scuttle)
library(scDblFinder)
library(ggplot2)
#library(writexl)
#library(SeuratDisk)
library(celldex)
library(sctransform)
library(readxl)
```

```{r}
# Load scRNA-seq
getwd()
PT1 <- Read10X(data.dir = 'data/scRNA/PT1')
PT2 <- Read10X(data.dir = 'data/scRNA/PT2')
RT3 <- Read10X(data.dir = 'data/scRNA/RT3')
RT4 <- Read10X(data.dir = 'data/scRNA/RT4')

NT7 <- Read10X(data.dir = 'data/scRNA/NT7')
NT8 <- Read10X(data.dir = 'data/scRNA/NT8')
PT5 <- Read10X(data.dir = 'data/scRNA/PT5')
RT6 <- Read10X(data.dir = 'data/scRNA/RT6')

PT1.seu <- CreateSeuratObject(counts = PT1, project = "PT1", min.cells = 3, min.features = 200)
PT2.seu <- CreateSeuratObject(counts = PT2, project = "PT2", min.cells = 3, min.features = 200)
PT3.seu <- CreateSeuratObject(counts = PT5, project = "PT3", min.cells = 3, min.features = 200)
RT1.seu <- CreateSeuratObject(counts = RT3, project = "RT1", min.cells = 3, min.features = 200)
RT2.seu <- CreateSeuratObject(counts = RT4, project = "RT2", min.cells = 3, min.features = 200)
RT3.seu <- CreateSeuratObject(counts = RT6, project = "RT3", min.cells = 3, min.features = 200)
NT1.seu <- CreateSeuratObject(counts = NT7, project = "NT1", min.cells = 3, min.features = 200)
NT2.seu <- CreateSeuratObject(counts = NT8, project = "NT2", min.cells = 3, min.features = 200)

rm(PT1)
rm(PT2)
rm(RT3)
rm(RT4)
rm(NT7)
rm(NT8)
rm(PT5)
rm(RT6)


```

```{r}


# Save each Seurat object as an .rds file
saveRDS(PT1.seu, file = "~/data/scRNA/PT1_seurat.rds")
saveRDS(PT2.seu, file = "~/data/scRNA/PT2_seurat.rds")
saveRDS(PT3.seu, file = "~/data/scRNA/PT3_seurat.rds")
saveRDS(RT1.seu, file = "~/data/scRNA/RT1_seurat.rds")
saveRDS(RT2.seu, file = "~/data/scRNA/RT2_seurat.rds")
saveRDS(RT3.seu, file = "~/data/scRNA/RT3_seurat.rds")
saveRDS(NT1.seu, file = "~/data/scRNA/NT1_seurat.rds")
saveRDS(NT2.seu, file = "~/data/scRNA/NT2_seurat.rds")



```

```{r}
# Load Seurat objects from .rds files
PT1.seu <- readRDS("~/data/scRNA/PT1_seurat.rds")
PT2.seu <- readRDS("~/data/scRNA/PT2_seurat.rds")
PT3.seu <- readRDS("~/data/scRNA/PT3_seurat.rds")
RT1.seu <- readRDS("~/data/scRNA/RT1_seurat.rds")
RT2.seu <- readRDS("~/data/scRNA/RT2_seurat.rds")
RT3.seu <- readRDS("~/data/scRNA/RT3_seurat.rds")
NT1.seu <- readRDS("~/data/scRNA/NT1_seurat.rds")
NT2.seu <- readRDS("~/data/scRNA/NT2_seurat.rds")

```

```{r}
seurat_list <- c('PT1' = PT1.seu, 'PT2' = PT2.seu, 'PT3' = PT3.seu,
                 'RT1' = RT1.seu, 'RT2' = RT2.seu, 'RT3' = RT3.seu,
                 'NT1' = NT1.seu, 'NT2' = NT2.seu)
```

Start with preprocessing

```{r}
sample.nfeature.cut <- c()
sample.ncount.cut <- c()
sample.mt.cut <- c()
seurat_list_qc <- c()
```

```{r}
count <- 1


for (obj in seurat_list) {
  print(names(seurat_list)[count])
  
  # Add percent.mt for QC
  obj[["percent.mt"]] <- PercentageFeatureSet(obj, pattern = "^MT-")
  
  # Visualize initial features
  print(VlnPlot(obj, features = c("nFeature_RNA", "nCount_RNA", "percent.mt"), ncol = 3))
  
  count <- 1 + count
  
}
  


```

```{r}
#Define cutoffs based on the violin plots
cutoffs <- list(
  "PT1" = list(nFeature_lower = 200, nFeature_upper = 11000, nCount_lower = 200, nCount_upper = 100000, percent_mt_upper = 40),
  "PT2" = list(nFeature_lower = 200, nFeature_upper = 10000, nCount_lower = 200, nCount_upper = 90000, percent_mt_upper = 30),
  "PT3" = list(nFeature_lower = 200, nFeature_upper = 11000, nCount_lower = 200, nCount_upper = 100000, percent_mt_upper = 30),
  "RT1" = list(nFeature_lower = 200, nFeature_upper = 10000, nCount_lower = 200, nCount_upper = 70000, percent_mt_upper = 12),
  "RT2" = list(nFeature_lower = 200, nFeature_upper = 9000, nCount_lower = 200, nCount_upper = 75000, percent_mt_upper = 12),
  "RT3" = list(nFeature_lower = 200, nFeature_upper = 11000, nCount_lower = 200, nCount_upper = 150000, percent_mt_upper = 20),
  "NT1" = list(nFeature_lower = 200, nFeature_upper = 10000, nCount_lower = 200, nCount_upper = 100000, percent_mt_upper = 20),
  "NT2" = list(nFeature_lower = 200, nFeature_upper = 10000, nCount_lower = 200, nCount_upper = 90000, percent_mt_upper = 30)
)  


  
#Now, run QC

count <- 1

for (obj in seurat_list) {
  
  # Add percent.mt for QC
  obj[["percent.mt"]] <- PercentageFeatureSet(obj, pattern = "^MT-")
  
  
  cutoff <- cutoffs[[names(seurat_list)[count]]]
  
  # Update the original object in the seurat_list
  seurat_list[[count]] <- obj
  
  # Doublet detection
  print("Start doublet detection")
  sce <- as.SingleCellExperiment(obj)
  
  # Add logcounts if missing
  if (!"logcounts" %in% assayNames(sce)) {
    logcounts(sce) <- log1p(counts(sce))
  }
  
  # Perform scDblFinder
  sce <- scDblFinder(sce)
  print("Doublets ok")
  
  obj <- as.Seurat(sce)
  
  # # Reconstruct Seurat object
  # counts_matrix <- counts(sce)  # Extract counts
  # meta_data <- as.data.frame(colData(sce))  # Extract metadata
  # 
  # # Create Seurat object manually
  # obj <- CreateSeuratObject(counts = counts_matrix, meta.data = meta_data)
  
  # # Normalize data (logcounts)
  # if ("logcounts" %in% assayNames(sce)) {
  #   obj <- NormalizeData(obj, normalization.method = "LogNormalize", scale.factor = 10000)
  # }
  
  # Scale data if needed (optional for downstream analysis)
  # obj <- ScaleData(obj)
  # 
  print("Seurat reconstructed.")

  sample.nfeature.cut <- c(sample.nfeature.cut, cutoff$nFeature_upper)
  sample.ncount.cut <- c(sample.ncount.cut, cutoff$nCount_upper)
  sample.mt.cut <- c(sample.mt.cut, cutoff$percent_mt_upper)
  
  # Perform QC filtering
  
  obj.filt <- subset(
    obj,
    subset = nFeature_RNA >= cutoff$nFeature_lower & 
             nFeature_RNA <= cutoff$nFeature_upper & 
             nCount_RNA >= cutoff$nCount_lower & 
             nCount_RNA <= cutoff$nCount_upper & 
             percent.mt <= cutoff$percent_mt_upper
  )
 
  obj.filt <- subset(obj.filt, subset = scDblFinder.class %in% c("singlet"))
  
  Idents(obj.filt) <- names(seurat_list)[count]
  
  # Visualize filtered features
  print(VlnPlot(obj.filt, features = c("nFeature_RNA", "nCount_RNA", "percent.mt"), ncol = 3))
  
  seurat_list_qc <- c(seurat_list_qc, obj.filt)
  print(count)
  count <- count + 1
}


```

```{r}
# Name outputs for reference
names(sample.mt.cut) <- names(seurat_list)
names(sample.ncount.cut) <- names(seurat_list)
names(sample.nfeature.cut) <- names(seurat_list)
names(seurat_list_qc) <- names(seurat_list)
```

```{r}
samples <- names(seurat_list)
samples.ncount.cut.summary <- data.frame(orig.ident=c(samples,samples), 
                                         types=c(rep('up.cut',length(samples)),
                                                 rep('down.cut',length(samples))),
                                         values=c(sample.ncount.cut,sample.ncount.cut/20))
samples.nfeature.cut.summary <- data.frame(orig.ident=c(samples,samples), 
                                           types=c(rep('up.cut',length(samples)),
                                                   rep('down.cut',length(samples))),
                                           values=c(sample.nfeature.cut,sample.nfeature.cut/20))
# mt don't need lower cut
samples.mt.cut.summary <- data.frame(orig.ident=c(samples), 
                                     types=c(rep('up.cut',length(samples))),
                                     values=c(sample.mt.cut))


# Merge all Seurat objects from the initial list
merge.seu <- merge(x = seurat_list[[1]], 
                   y = seurat_list[2:length(seurat_list)], 
                   add.cell.ids = names(seurat_list), 
                   project = "MergedSeurat")
metadata <- merge.seu@meta.data

# Visualize the number of cell counts per sample
metadata %>% 
  ggplot(aes(x=orig.ident, fill=orig.ident)) + 
  geom_bar() +
  theme_classic() +
  theme(axis.text.x = element_text(angle = 45, vjust = 1, hjust=1)) +
  theme(plot.title = element_text(hjust=0.5, face="bold")) +
  ggtitle("NCells")

metadata %>% 
  ggplot(aes(color=orig.ident, x=nCount_RNA, fill= orig.ident)) + 
  geom_density(alpha=.5) +
  scale_x_log10() +
  theme_classic() +
  geom_vline(data = samples.ncount.cut.summary, 
             aes(xintercept = values), 
             linetype = "dashed",show.legend = F) +
  facet_wrap(~orig.ident,ncol = 4)

metadata %>% 
  ggplot(aes(color=orig.ident, x=nFeature_RNA, fill= orig.ident)) + 
  geom_density(alpha=.5) +
  scale_x_log10() +
  theme_classic() +
  geom_vline(data = samples.nfeature.cut.summary, 
             aes(xintercept = values), 
             linetype = "dashed",show.legend = F) +
  facet_wrap(~orig.ident,ncol = 4)

metadata %>%
  ggplot(aes(color=orig.ident, x=percent.mt, fill= orig.ident)) +
  geom_density(alpha=.5) +
  scale_x_log10() +
  theme_classic() +
  geom_vline(data = samples.mt.cut.summary,
             aes(xintercept = values),
             linetype = "dashed",show.legend = F) +
  facet_wrap(~orig.ident,ncol = 4)

metadata %>%
  ggplot(aes(x=nCount_RNA, y=nFeature_RNA, color=percent.mt)) +
  geom_point() +
  scale_colour_gradient(low = "gray90", high = "black") +
  geom_smooth(se=TRUE,level=0.9) +
  scale_x_log10() +
  scale_y_log10() +
  theme_classic() +
  geom_vline(data = samples.ncount.cut.summary,
             aes(xintercept = values),
             linetype = "dashed",show.legend = F)+
  geom_hline(data = samples.nfeature.cut.summary,
             aes(yintercept = values),
             linetype = "dashed",show.legend = F) +
  facet_wrap(~orig.ident,ncol = 4)

merge.qc.seu <- merge(x=seurat_list_qc[[1]], y=seurat_list_qc[2:length(seurat_list_qc)])

metadata.qc <- merge.qc.seu@meta.data
metadata.qc %>% 
  ggplot(aes(x=orig.ident, fill=orig.ident)) + 
  geom_bar() +
  theme_classic() +
  theme(axis.text.x = element_text(angle = 45, vjust = 1, hjust=1)) +
  theme(plot.title = element_text(hjust=0.5, face="bold")) +
  ggtitle("NCells")

metadata.qc %>% 
  ggplot(aes(color=orig.ident, x=nCount_RNA, fill= orig.ident)) + 
  geom_density(alpha=.5) +
  scale_x_log10() +
  theme_classic() +
  geom_vline(data = samples.ncount.cut.summary, 
             aes(xintercept = values), 
             linetype = "dashed",show.legend = F) +
  facet_wrap(~orig.ident,ncol=4)

metadata.qc %>% 
  ggplot(aes(color=orig.ident, x=nFeature_RNA, fill= orig.ident)) + 
  geom_density(alpha=.5) +
  scale_x_log10() +
  theme_classic() +
  geom_vline(data = samples.nfeature.cut.summary, 
             aes(xintercept = values), 
             linetype = "dashed",show.legend = F) +
  facet_wrap(~orig.ident,ncol=4)

metadata.qc %>% 
  ggplot(aes(color=orig.ident, x=percent.mt, fill= orig.ident)) + 
  geom_density(alpha=.5) +
  scale_x_log10() +
  theme_classic() +
  geom_vline(data = samples.mt.cut.summary, 
             aes(xintercept = values), 
             linetype = "dashed",show.legend = F) +
  facet_wrap(~orig.ident,ncol=4)

metadata.qc %>% 
  ggplot(aes(x=nCount_RNA, y=nFeature_RNA, color=percent.mt)) + 
  geom_point() + 
  scale_colour_gradient(low = "gray90", high = "black") +
  geom_smooth(se=TRUE,level=0.9) +
  scale_x_log10() +
  scale_y_log10() +
  theme_classic() +
  geom_vline(data = samples.ncount.cut.summary, 
             aes(xintercept = values), 
             linetype = "dashed",show.legend = F)+
  geom_hline(data = samples.nfeature.cut.summary, 
             aes(yintercept = values), 
             linetype = "dashed",show.legend = F) +
  facet_wrap(~orig.ident,ncol=4)
```

After the QC has been carried out, we need to integrate the scRNAseq and the scATACseq:

Source of integration info: <https://hbctraining.github.io/scRNA-seq_online/lessons/06_integration.html>

First, we integrate the scRNAseq:

```{r}
# seurat_list_qc$PT1 <- SCTransform(seurat_list_qc$PT1, vst.flavor = "v2", verbose = FALSE)
# seurat_list_qc$PT2 <- SCTransform(seurat_list_qc$PT2, vst.flavor = "v2", verbose = FALSE)
# seurat_list_qc$RT1 <- SCTransform(seurat_list_qc$RT1, vst.flavor = "v2", verbose = FALSE)
# seurat_list_qc$RT2 <- SCTransform(seurat_list_qc$RT2, vst.flavor = "v2", verbose = FALSE)

```

```{r}
seu.TTs.part1 <- merge(seurat_list_qc$PT1, y = c(seurat_list_qc$PT2, 
                                                 seurat_list_qc$RT1,
                                                 seurat_list_qc$RT2), 
                       add.cell.ids = c("PT1", "PT2", "RT1", "RT2"), 
                       project = "scRNA_09302020")

seu.TTs.part2 <- merge(seurat_list_qc$PT3, y = c(seurat_list_qc$RT3), 
                       add.cell.ids = c("PT3", "RT3"), 
                       project = "scRNA_01112021")
```

```{r}
seu.batchs.list <- c("seu.TTs.batch1"=seu.TTs.part1, "seu.TTs.batch2"=seu.TTs.part2) 
seurat.qc.sct.list <- lapply(X = seu.batchs.list, FUN = function(x) {
  x <- SCTransform(x, vst.flavor = "v2", verbose = FALSE)
})

features <- SelectIntegrationFeatures(object.list = seurat.qc.sct.list, nfeatures = 3000)
seurat.qc.sct.list <- PrepSCTIntegration(object.list = seurat.qc.sct.list, anchor.features = features)
```

```{r}
# seu.TTs.part1 <- NormalizeData(seu.TTs.part1)
# seu.TTs.part1 <- FindVariableFeatures(seu.TTs.part1)
# seu.TTs.part1 <- ScaleData(seu.TTs.part1)
# seu.TTs.part1 <- RunPCA(seu.TTs.part1)

```

```{r}
# seu.TTs.part2 <- NormalizeData(seu.TTs.part2)
# seu.TTs.part2 <- FindVariableFeatures(seu.TTs.part2)
# seu.TTs.part2 <- ScaleData(seu.TTs.part2)
# seu.TTs.part2 <- RunPCA(seu.TTs.part2)
```

```{r}
batchs.anchors <- FindIntegrationAnchors(object.list = seurat.qc.sct.list, normalization.method = "SCT",
                                         anchor.features = features)

common_genes <- Reduce(intersect, list(rownames(seu.TTs.part1),rownames(seu.TTs.part2)))

TTs.combined.sct <- IntegrateData(anchorset = batchs.anchors, 
                                  normalization.method = "SCT",
                                  features.to.integrate = common_genes)

TTs.combined.sct <- RunPCA(TTs.combined.sct, npcs = 30, verbose = FALSE)
```

Integrate data from the two batches:

```{r}
# Step 1: Backup the original data before subsetting
seu.TTs.part1$original_RNA <- seu.TTs.part1[['RNA']]  # Backup original data
seu.TTs.part2$original_RNA <- seu.TTs.part2[['RNA']]  # Backup original data

# Step 2: Identify common genes across datasets before processing
common_genes <- Reduce(intersect, list(rownames(seu.TTs.part1), rownames(seu.TTs.part2)))

# Step 3: Subset the Seurat objects to retain only common genes before transformation
seu.TTs.part1 <- subset(seu.TTs.part1, features = common_genes)
seu.TTs.part2 <- subset(seu.TTs.part2, features = common_genes)

# Step 4: Perform SCTransform normalization
seu.batchs.list <- list("batch1" = seu.TTs.part1, "batch2" = seu.TTs.part2)

seurat.qc.sct.list <- lapply(X = seu.batchs.list, FUN = function(x) {
  SCTransform(x, vst.flavor = "v2", verbose = FALSE)
})

# Step 5: Select integration features based on common genes only
features <- SelectIntegrationFeatures(object.list = seurat.qc.sct.list, nfeatures = 3000)

# Ensure features align with the common gene set
features <- intersect(features, common_genes)

# Step 6: Prepare the data for SCT integration
seurat.qc.sct.list <- PrepSCTIntegration(object.list = seurat.qc.sct.list, anchor.features = features)

# Step 7: Find integration anchors
batchs.anchors <- FindIntegrationAnchors(object.list = seurat.qc.sct.list, 
                                         normalization.method = "SCT",
                                         anchor.features = features)

# Step 8: Integrate only the common genes
TTs.combined.sct <- IntegrateData(anchorset = batchs.anchors, 
                                  normalization.method = "SCT",
                                  features.to.integrate = common_genes)

# Step 9: Restore the full feature set for further analysis (optional)
TTs.combined.sct[['RNA_full']] <- seu.TTs.part1$original_RNA  # Restoring full feature set
DefaultAssay(TTs.combined.sct) <- "integrated"  # Use integrated assay by default

# Step 10: Switch back to full gene set for DGE analysis
#DefaultAssay(TTs.combined.sct) <- "RNA_full"


```

```{r}
batchs.anchors <- FindIntegrationAnchors(object.list = seurat.qc.sct.list, normalization.method = "SCT",
                                         anchor.features = features)

common_genes <- Reduce(intersect, list(rownames(seu.TTs.part1),rownames(seu.TTs.part2)))

TTs.combined.sct <- IntegrateData(anchorset = batchs.anchors, 
                                  normalization.method = "SCT",
                                  features.to.integrate = common_genes)

TTs.combined.sct <- RunPCA(TTs.combined.sct, npcs = 30, verbose = FALSE)
```

```{r}
ElbowPlot(TTs.combined.sct)
```

Trying integrating by tissue type and concatenating matrices

```{r}
# Merge all PT samples (PT1, PT2, PT3)
seu.PT <- merge(
  seurat_list_qc$PT1, 
  y = list(seurat_list_qc$PT2, seurat_list_qc$PT3),
  add.cell.ids = c("PT1", "PT2", "PT3"), 
  project = "Primary_Tumor"
)

# Merge all RT samples (RT1, RT2, RT3)
seu.RT <- merge(
  seurat_list_qc$RT1, 
  y = list(seurat_list_qc$RT2, seurat_list_qc$RT3),
  add.cell.ids = c("RT1", "RT2", "RT3"), 
  project = "Recurrent_Tumor"
)

# Find common features (genes) between the two merged objects
common_genes <- intersect(rownames(seu.PT), rownames(seu.RT))

# Subset the Seurat objects to retain only common genes
seu.PT <- subset(seu.PT, features = common_genes)
seu.RT <- subset(seu.RT, features = common_genes)

# Concatenate count matrices for PT samples
seu.PT[['RNA']]@counts <- do.call(cbind, 
  seu.PT[['RNA']]@layers[c('counts.1', 'counts.2', 'counts.3')]
)

# Concatenate count matrices for RT samples
seu.RT[['RNA']]@counts <- do.call(cbind, 
  seu.RT[['RNA']]@layers[c('counts.1', 'counts.2', 'counts.3')]
)

# Remove unnecessary layers to save memory
seu.PT[['RNA']]@layers <- list()
seu.RT[['RNA']]@layers <- list()

# Ensure the correct default assay is set
DefaultAssay(seu.PT) <- "RNA"
DefaultAssay(seu.RT) <- "RNA"
# Create a list with PT and RT objects
seu.batchs.list <- list("PT" = seu.PT, "RT" = seu.RT)

# Perform SCTransform normalization on each dataset
seurat.qc.sct.list <- lapply(seu.batchs.list, function(x) {
  SCTransform(x, vst.flavor = "v2", verbose = FALSE)
})

# Select features for integration
features <- SelectIntegrationFeatures(object.list = seurat.qc.sct.list, nfeatures = 3000)

# Prepare the data for SCT integration
seurat.qc.sct.list <- PrepSCTIntegration(object.list = seurat.qc.sct.list, anchor.features = features, verbose = TRUE)
# Find integration anchors between PT and RT
batchs.anchors <- FindIntegrationAnchors(object.list = seurat.qc.sct.list, 
                                         normalization.method = "SCT",
                                         anchor.features = features)

# Integrate the data using shared features
common_genes <- Reduce(intersect, list(rownames(seu.PT), rownames(seu.RT)))

TTs.combined.sct <- IntegrateData(anchorset = batchs.anchors, 
                                  normalization.method = "SCT",
                                  features.to.integrate = common_genes)

# # Run dimensionality reduction and clustering
# TTs.combined.sct <- RunPCA(TTs.combined.sct, npcs = 30, verbose = FALSE)
# TTs.combined.sct <- RunUMAP(TTs.combined.sct, reduction = "pca", dims = 1:30)
# TTs.combined.sct <- FindNeighbors(TTs.combined.sct, reduction = "pca", dims = 1:30)
# TTs.combined.sct <- FindClusters(TTs.combined.sct, resolution = 0.9)



```

Now, integrate this object (primary + recurrent tumor samples) with the normal samples

```{r}
NTs.seu <- merge(seurat_list_qc$NT1, y = c(seurat_list_qc$NT2), 
                 add.cell.ids = c("NT1", "NT2"), 
                 project = "scRNA_NTs")


# Run the standard workflow for visualization and clustering
NTs.seu <- NormalizeData(NTs.seu, 
                         normalization.method = "LogNormalize", 
                         scale.factor = 10000)

NTs.seu <- FindVariableFeatures(NTs.seu, 
                                selection.method = "vst", 
                                nfeatures = 2000)

NTs.seu <- ScaleData(NTs.seu, 
                     vars.to.regress = "percent.mt")

NTs.seu <- RunPCA(NTs.seu, 
                  npcs = 30, 
                  verbose = FALSE, 
                  features = VariableFeatures(object = NTs.seu))

ElbowPlot(NTs.seu, ndims = 30)
```

Integrate:

```{r}
objects.list <- c("seu.TTs"=TTs.combined.sct, "seu.NTs"=NTs.seu) 
seurat.qc.list <- lapply(X = objects.list, FUN = function(x) {
  x <- SCTransform(x, vst.flavor = "v2", verbose = FALSE)
})

features <- SelectIntegrationFeatures(object.list = seurat.qc.list, nfeatures = 3000)

seurat.qc.list <- PrepSCTIntegration(object.list = seurat.qc.list, anchor.features = features, verbose = TRUE)

batchs.anchors <- FindIntegrationAnchors(object.list = seurat.qc.list, normalization.method = "SCT",
                                         anchor.features = features)

common_genes <- Reduce(intersect, list(rownames(TTs.combined.sct),rownames(NTs.seu)))

scrna.combined.sct <- IntegrateData(anchorset = batchs.anchors, 
                                  normalization.method = "SCT",
                                  features.to.integrate = common_genes)
```

<https://hbctraining.github.io/scRNA-seq_online/lessons/06_integration.html>

```{r}
NTs.seu <- RunUMAP(NTs.seu, reduction = "pca", dims = 1:30)
NTs.seu <- FindNeighbors(NTs.seu, reduction = "pca", dims = 1:30)

# Run FindClusters using three different resolutions
NTs.seu <- FindClusters(NTs.seu, resolution = 0.3, algorithm = 2)
NTs.seu <- FindClusters(NTs.seu, resolution = 0.9, algorithm = 2)
NTs.seu <- FindClusters(NTs.seu, resolution = 0.5, algorithm = 2)

# check the cluster location
DimPlot(NTs.seu, label=TRUE, group.by = "RNA_snn_res.0.9")

# check the cluster location
DimPlot(NTs.seu, label=TRUE,  group.by = "RNA_snn_res.0.3")

# check the cluster location
DimPlot(NTs.seu, label=TRUE,  group.by = "RNA_snn_res.0.5")

```

Run clustree

```{r}
library(clustree)
clustree(NTs.seu, prefix = "RNA_snn_res.")

Idents(NTs.seu) <- "RNA_snn_res.0.9"
```

```{r}

# Find markers
NTs.seu <- SCTransform(NTs.seu, method = "glmGamPoi", vars.to.regress = "percent.mt")
NTs.seu <- PrepSCTFindMarkers(NTs.seu)
# Find markers for every cluster compared to all remaining cells, report only the positive ones
NTs_markers <- FindAllMarkers(object = NTs.seu, 
                              assay='SCT',
                              only.pos = TRUE,
                              logfc.threshold = 0.25)

NTs_top <- NTs_markers %>%
  group_by(cluster) %>%
  top_n(n = 20,
        wt = avg_log2FC)

sheetlist <- list("allPosMarkers"=NTs_markers,"Top20Markers"=NTs_top)
write_xlsx(sheetlist, '/scratch/u/kfang/scRNA_scATAC/10x_result/scRNA/NTs_markers.xlsx')

# plot stackviolin plot
NTs.marker <- c("KRT15","KRT16","KRT17", # Basal
                "ESRP1","ELF3","RARRES1",       # Luminal
                "TOP2A", "CDK1","MKI67","CENPF", #Luminal Progenitor
                "COL4A6","COL4A5",
                "S100A10", "ID1",
                "CXCL1", "CXCL8", 
                "CD24")

VlnPlot(NTs.seu, features = NTs.marker,
        stack=T,pt.size=0,
        flip = T,
        add.noise = T) +
  theme(axis.text.y = element_blank(), 
        axis.ticks.y = element_blank(),
        axis.title = element_blank(),
        axis.text.x = element_text(colour = 'black',size = 14),
        legend.position = 'none')


```

```{r}
# add cell type annotation
NTs.seu <- RenameIdents(object = NTs.seu,
                        "0" = "Luminal cells", 
                        "1" = "Basal cells",
                        "2" = "Fibroblasts", "3" = "Endothelial cells",
                        "4" = "Myeloid cells", "5" = "Luminal cells",
                        "6" = "Luminal Progenitor",
                        "7" = "Luminal Progenitor",
                        "8" = "Basal cells", 
                        "9" = "Luminal Progenitor",
                        "10" = "Luminal cells")
NTs.seu$cell.annot <- Idents(NTs.seu)
DimPlot(NTs.seu, label = TRUE, repel = TRUE, label.size = 6)
SaveH5Seurat(NTs.seu,'/scratch/u/kfang/scRNA_scATAC/10x_result/scRNA/NTs',overwrite = TRUE)

NTs_top <- NTs_markers %>%
  group_by(cluster) %>%
  top_n(n = 10,
        wt = avg_log2FC)

DoHeatmap(NTs.seu, features = NTs_top$gene,label=FALSE) + theme(text = element_text(face="bold",size=8))
```

<https://hbctraining.github.io/scRNA-seq_online/lessons/06_integration.html>
