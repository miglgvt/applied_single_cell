---
title: "DeSeq2"
format: html
editor: visual
---

```{r}
library(DESeq2)
library(dplyr)
library(tibble)
```

Prepare the input data for pseudobulk analysis from our single-cell dataset.

```{r}
colnames(TTs.annotated@meta.data)
View(TTs.annotated@meta.data)
```

```{r}
# Step 1: Aggregate Single-Cell Data to Pseudobulk

# Aggregate counts to sample level
counts <- AggregateExpression(TTs.annotated, 
                              group.by = c("cell.annot", "ident"),
                              assays =  "RNA",
                              return.seurat = FALSE)
counts <- counts$RNA

# transpose
counts.t <- t(counts)

# convert to data.frame
counts.t <- as.data.frame(counts.t)

# get values where to split
splitRows <- gsub('_.*', '', rownames(counts.t))

# split data.frame
cts.split <- split.data.frame(counts.t,
                              f = factor(splitRows))
# fix colnames and transpose
cts.split.modified <- lapply(cts.split, function(x){
    rownames(x) <- gsub('.*_(.*)', '\\1', rownames(x)) #whatever comes after the underscore in the row names will be retained in the final result.
    t(x)
})


```

```{r}
head(cts.split.modified)
```

Extract the count matrix for **Breast cancer cells** from the ***cts.split.modified*** object we created earlier.

```{r}
counts_breast.cells <- cts.split.modified$'Breast cancer cells'
```

Generate the sample level metadata

```{r}
colData <- data.frame(samples = colnames(counts_breast.cells))

colData <- colData %>%
  dplyr::mutate(condition = ifelse(grepl('RT', samples), 'Stimulated', 'Control')) %>%
  column_to_rownames(var = 'samples')
```

Create DESeq2 object and name it ***dds*** using the function `DESeqDataSetFromMatrix()`

```{r}
# Create DESeq2 object   
dds <- DESeqDataSetFromMatrix(countData = counts_breast.cells,
                              colData = colData,
                              design = ~ condition)
```

Remove rows (genes) that have fewer than 10 reads from ***dds***.

```{r}
# filter
keep <- rowSums(counts(dds)) >=10
dds <- dds[keep,]
```

Run DESeq2

```{r}
dds <- DESeq(dds)
```

Print the result and see what info it gives you.

```{r}
# Check the coefficients for the comparison
resultsNames(dds)
```

```{r}
# Generate results object
res <- results(dds, name = "condition_Stimulated_vs_Control")

summary(res)
```

```{r}
# Turn the DESeq2 results object into a tibble for use with tidyverse functions
res_tbl <- res %>%
  data.frame() %>%
  rownames_to_column(var = "gene") %>%
  as_tibble() %>%
  arrange(padj)

# Check results output
res_tbl 
```

```{r}
# Set thresholds
padj_cutoff <- 0.005

# Subset the significant results
sig_res <- dplyr::filter(res_tbl, padj < padj_cutoff) %>%
  dplyr::arrange(padj)

# Check significant genes output
sig_res
```

Identify the top 20 differentially expressed genes in Breast Cancer cell 3 hours after stimulation, compared to unstimulated cells. Sort the genes by either padj

```{r}
## Order results by padj values
top20_sig_genes <- sig_res %>%
  dplyr::arrange(padj) %>%
  dplyr::pull(gene) %>%
  head(n=20)

print(top20_sig_genes)
```

```{r}
library(msigdbr)

msigdb <- msigdbr(species= "Homo sapiens", category= "H")

```

```{r}
library(dplyr)

# Convert msigdb dataframe to a list of gene sets
msigdb_list <- msigdb %>%
  dplyr::select(gs_name, gene_symbol) %>%  # Select only pathway name and gene columns
  dplyr::group_by(gs_name) %>%            # Group by pathway name
  dplyr::summarize(genes = list(gene_symbol)) %>%  # Create a list of genes for each pathway
  deframe()  # Convert to a named list

```

Add Entrez ID information to the *res* object and remove those genes that do not have an Entrez ID.

```{r}
res$genes <- rownames(res)
#Add EntrezID for the genes
library(org.Hs.eg.db)
```

```{r}
Entrez <- AnnotationDbi::select(org.Hs.eg.db,
                                    key=res$genes, 
                                    columns="ENTREZID",
                                    keytype="SYMBOL")
```

```{r}
Entrez <- as_tibble(Entrez)
res <- as.data.frame(res)
res <- inner_join(res, Entrez, by=c("genes"="SYMBOL"))
#Remove those genes that do not have an entrezid
res <- filter(res, !is.na(ENTREZID))
```

Rank the genes by p-value, ensuring that up-regulated genes appear first and down-regulated genes appear last. You can do this by combining the sign of the fold change with the p-value, using the following statistic: `-log10( p-value ) * sign( fold-Change)`

```{r}
#Create new metric
res$stat_sig <- -log10(res$pvalue) * sign(res$log2FoldChange)
rankData <- res$stat_sig
names(rankData) <- res$genes
```

```{r}
set.seed(123)
rankData <- rankData + rnorm(length(rankData), mean=0, sd=1e-6)
rankData <- rankData[!duplicated(names(rankData))]
```

Run fgsea and take a look at the results

```{r}
# Check if all values in stats are finite
# Remove non-finite values from rankData
rankData <- rankData[is.finite(rankData)]
```

```{r}
library(fgsea)
#Running fgsea algorithm:
fgseaRes <- fgsea(pathways=msigdb_list, stats=rankData)

#Tidy the resultsprint
fgseaResTidy <- fgseaRes %>%
  as_tibble() %>%
  arrange(desc(NES))
```

Plot the top 10 up-regulated/down-regulated genes after stimulation

```{r}
library(ggplot2)
# Sort the data frame based on NES in descending order to get top 10 pathways
top_10 <- fgseaResTidy %>%
  arrange(desc(NES)) %>%
  head(10)

# Sort the data frame based on NES in ascending order to get bottom 10 pathways
bottom_10 <- fgseaResTidy %>%
  arrange(NES) %>%
  head(10)

# Combine top 10 and bottom 10 pathways
top_bottom_10 <- rbind(top_10, bottom_10)

head(top_10)
head(bottom_10)

ggplot(top_bottom_10, aes(reorder(pathway, NES), NES)) +
  geom_col(aes(fill=padj<0.05)) +
  coord_flip() +
  labs(x="Pathway", y="Normalized Enrichment Score",
       title="Top 10 and Bottom 10 Hallmark pathways based on Absolute NES from GSEA")+ theme_minimal()
```

```{r}
head(top_10)
```
